
PASS # AUDIT TASK RUNNER STARTED. 
FAIL Executing "Frequency AudioParam" promise_test: Unhandled rejection with value: object "ReferenceError: Can't find variable: ConstantSourceNode"
FAIL Executing "Q AudioParam" promise_test: Unhandled rejection with value: object "ReferenceError: Can't find variable: ConstantSourceNode"
FAIL Executing "Gain AudioParam" promise_test: Unhandled rejection with value: object "ReferenceError: Can't find variable: ConstantSourceNode"
FAIL Executing "Detune AudioParam" promise_test: Unhandled rejection with value: object "ReferenceError: Can't find variable: ConstantSourceNode"
PASS Executing "All k-rate inputs" 
PASS Audit report 
PASS > [Frequency AudioParam] k-rate input works 
PASS   frequency: new OscillatorNode(context, {frequency: 440}) did not throw an exception. 
PASS   Reference BiquadFilterNode(c, {"type":"lowpass","frequency":0}) did not throw an exception. 
PASS   refNode.frequency.setValueAtTime(880,0) did not throw an exception. 
PASS   refNode.frequency.linearRampToValueAtTime.(0,0.125) did not throw an exception. 
PASS   Test BiquadFilterNode(context, {"type":"lowpass","frequency":0}) did not throw an exception. 
PASS > [Q AudioParam] k-rate input works 
PASS   Q: new OscillatorNode(context, {frequency: 1760}) did not throw an exception. 
PASS   Reference BiquadFilterNode(c, {"type":"bandpass","frequency":440,"Q":0}) did not throw an exception. 
PASS   refNode.Q.setValueAtTime(0,0) did not throw an exception. 
PASS   refNode.Q.linearRampToValueAtTime.(100,0.125) did not throw an exception. 
PASS   Test BiquadFilterNode(context, {"type":"bandpass","frequency":440,"Q":0}) did not throw an exception. 
PASS > [Gain AudioParam] k-rate input works 
PASS   gain: new OscillatorNode(context, {frequency: 1760}) did not throw an exception. 
PASS   Reference BiquadFilterNode(c, {"type":"peaking","frequency":1760,"Q":100,"gain":0}) did not throw an exception. 
PASS   refNode.gain.setValueAtTime(0,0) did not throw an exception. 
PASS   refNode.gain.linearRampToValueAtTime.(-100,0.125) did not throw an exception. 
PASS   Test BiquadFilterNode(context, {"type":"peaking","frequency":1760,"Q":100,"gain":0}) did not throw an exception. 
PASS > [Detune AudioParam] k-rate input works 
PASS   detune: new OscillatorNode(context, {frequency: 440}) did not throw an exception. 
PASS   Reference BiquadFilterNode(c, {"type":"lowpass","frequency":2200,"detune":0,"gain":0}) did not throw an exception. 
PASS   refNode.detune.setValueAtTime(0,0) did not throw an exception. 
PASS   refNode.detune.linearRampToValueAtTime.(-13323.945370094427,0.125) did not throw an exception. 
PASS   Test BiquadFilterNode(context, {"type":"lowpass","frequency":2200,"detune":0,"gain":0}) did not throw an exception. 
PASS > [All k-rate inputs]  
PASS   Create: refNode = new BiquadFilterNode(context, {"type":"peaking","frequency":0,"detune":0,"gain":0,"Q":0}) did not throw an exception. 
PASS   Create: tstNode = new BiquadFilterNode(context, {"type":"peaking","frequency":0,"detune":0,"gain":0,"Q":0}) did not throw an exception. 
PASS   Set rate: refNode[frequency].automationRate = 'k-rate' did not throw an exception. 
PASS   Set rate: tstNode[frequency].automationRate = 'k-rate' did not throw an exception. 
PASS   Set rate: refNode[Q].automationRate = 'k-rate' did not throw an exception. 
PASS   Set rate: tstNode[Q].automationRate = 'k-rate' did not throw an exception. 
PASS   Set rate: refNode[gain].automationRate = 'k-rate' did not throw an exception. 
PASS   Set rate: tstNode[gain].automationRate = 'k-rate' did not throw an exception. 
PASS   Set rate: refNode[detune].automationRate = 'k-rate' did not throw an exception. 
PASS   Set rate: tstNode[detune].automationRate = 'k-rate' did not throw an exception. 
FAIL X Create: mod[frequency] = new ConstantSourceNode(context, {offset: 0}) incorrectly threw ReferenceError: "Can't find variable: ConstantSourceNode". assert_true: expected true got false
FAIL X Set rate: mod[frequency].offset.automationRate = 'a-rate' incorrectly threw TypeError: "undefined is not an object (evaluating 'mod[param].offset')". assert_true: expected true got false
FAIL X Create: mod[Q] = new ConstantSourceNode(context, {offset: 0}) incorrectly threw ReferenceError: "Can't find variable: ConstantSourceNode". assert_true: expected true got false
FAIL X Set rate: mod[Q].offset.automationRate = 'a-rate' incorrectly threw TypeError: "undefined is not an object (evaluating 'mod[param].offset')". assert_true: expected true got false
FAIL X Create: mod[gain] = new ConstantSourceNode(context, {offset: 0}) incorrectly threw ReferenceError: "Can't find variable: ConstantSourceNode". assert_true: expected true got false
FAIL X Set rate: mod[gain].offset.automationRate = 'a-rate' incorrectly threw TypeError: "undefined is not an object (evaluating 'mod[param].offset')". assert_true: expected true got false
FAIL X Create: mod[detune] = new ConstantSourceNode(context, {offset: 0}) incorrectly threw ReferenceError: "Can't find variable: ConstantSourceNode". assert_true: expected true got false
FAIL X Set rate: mod[detune].offset.automationRate = 'a-rate' incorrectly threw TypeError: "undefined is not an object (evaluating 'mod[param].offset')". assert_true: expected true got false
PASS   Automate 0: refNode.frequency.setValueAtTime(1760, 0) did not throw an exception. 
FAIL X Automate 0: mod[frequency].offset.setValueAtTime(1760, 0) incorrectly threw TypeError: "undefined is not an object (evaluating 'mod[param[0]].offset')". assert_true: expected true got false
PASS   Automate 0: refNode.Q.setValueAtTime(0, 0) did not throw an exception. 
FAIL X Automate 0: mod[Q].offset.setValueAtTime(0, 0) incorrectly threw TypeError: "undefined is not an object (evaluating 'mod[param[0]].offset')". assert_true: expected true got false
PASS   Automate 0: refNode.gain.setValueAtTime(0, 0) did not throw an exception. 
FAIL X Automate 0: mod[gain].offset.setValueAtTime(0, 0) incorrectly threw TypeError: "undefined is not an object (evaluating 'mod[param[0]].offset')". assert_true: expected true got false
PASS   Automate 0: refNode.detune.setValueAtTime(4800, 0) did not throw an exception. 
FAIL X Automate 0: mod[detune].offset.setValueAtTime(4800, 0) incorrectly threw TypeError: "undefined is not an object (evaluating 'mod[param[0]].offset')". assert_true: expected true got false
PASS   Automate 1: refNode[frequency].linearRampToValueAtTime(440, 0.125) did not throw an exception. 
FAIL X Automate 1: mod[frequency].offset.linearRampToValueAtTime(440, 0.125) incorrectly threw TypeError: "undefined is not an object (evaluating 'mod[param[0]].offset')". assert_true: expected true got false
PASS   Automate 1: refNode[Q].linearRampToValueAtTime(40, 0.125) did not throw an exception. 
FAIL X Automate 1: mod[Q].offset.linearRampToValueAtTime(40, 0.125) incorrectly threw TypeError: "undefined is not an object (evaluating 'mod[param[0]].offset')". assert_true: expected true got false
PASS   Automate 1: refNode[gain].linearRampToValueAtTime(-100, 0.125) did not throw an exception. 
FAIL X Automate 1: mod[gain].offset.linearRampToValueAtTime(-100, 0.125) incorrectly threw TypeError: "undefined is not an object (evaluating 'mod[param[0]].offset')". assert_true: expected true got false
PASS   Automate 1: refNode[detune].linearRampToValueAtTime(0, 0.125) did not throw an exception. 
FAIL X Automate 1: mod[detune].offset.linearRampToValueAtTime(0, 0.125) incorrectly threw TypeError: "undefined is not an object (evaluating 'mod[param[0]].offset')". assert_true: expected true got false
PASS   All k-rate AudioParams is not constantly 0 (contains 4095 different values). 
FAIL X All k-rate AudioParams does not equal [0,0.3387378752231598,0.6374238729476929,0.8607419729232788,0.9822871685028076,0.9876880645751953,0.8763062953948975,0.6613117456436157,0.3681243062019348,0.03141050040721893,-0.3090170621871948,-0.6129071116447449,-0.8443278074264526,-0.9759165644645691,-0.9921145439147949,-0.8910062313079834...] with an element-wise tolerance of {"absoluteThreshold":0,"relativeThreshold":0}.
	Index	Actual			Expected		AbsError		RelError		Test threshold
	[640]	9.5106071233749390e-1	7.8681844472885132e-1	1.6424226760864258e-1	2.0874226920956684e-1	0.0000000000000000e+0
	[641]	9.9950587749481201e-1	1.0043710470199585e+0	4.8651695251464844e-3	4.8439961900353405e-3	0.0000000000000000e+0
	[642]	9.2977106571197510e-1	9.6980714797973633e-1	4.0036082267761230e-2	4.1282519262889332e-2	0.0000000000000000e+0
	[643]	7.5010180473327637e-1	8.2636988162994385e-1	7.6268076896667480e-2	9.2292904898996594e-2	0.0000000000000000e+0
	[644]	4.8174136877059937e-1	6.0990983247756958e-1	1.2816846370697021e-1	2.1014329804509885e-1	0.0000000000000000e+0
	...and 3451 more errors.
	Max AbsError of 1.0730743706226349e+0 at index of 1032.
	[1032]	-9.9802517890930176e-1	7.5049191713333130e-2	1.0730743706226349e+0	1.4298280182969567e+1	0.0000000000000000e+0
	Max RelError of 2.3799457253488748e+4 at index of 1250.
	[1250]	-1.0000000000000000e+0	-4.2015999497380108e-5	9.9995798400050262e-1	2.3799457253488748e+4	0.0000000000000000e+0
 assert_true: expected true got false
FAIL < [All k-rate inputs] 17 out of 36 assertions were failed. assert_true: expected true got false
FAIL # AUDIT TASK RUNNER FINISHED: 1 out of 5 tasks were failed. assert_true: expected true got false

